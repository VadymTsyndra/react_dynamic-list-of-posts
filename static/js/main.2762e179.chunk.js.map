{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","App.tsx","index.tsx"],"names":["PostsList","posts","setSideBarOpened","isSideBarOpened","loadComments","setIsCommentFormOpened","useState","id","setId","openClick","post","postId","className","map","title","type","onClick","Loader","NewCommentForm","addComment","loadingComment","inputName","setInputName","inputNameError","setInputNameError","inputEmail","setInputEmail","inputEmailError","setInputEmailError","inputComment","setInputComment","inputCommentError","setInputCommentError","htmlFor","name","placeholder","classNames","value","onChange","event","target","trim","email","body","preventDefault","submitData","PostDetails","currentPost","comments","isLoadingComments","commentsError","isCommentFormOpened","isLoadingComment","deleteComment","length","href","UserSelector","users","loadPosts","selectedUser","setSelectedUser","isOpen","setIsOpen","toggleDropdown","role","user","handleUserSelect","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","App","setUsers","setPosts","setCurrentPost","isLoadingPosts","setIsLoadingPosts","postsError","setPostsError","setIsSideBarOpened","setComments","setIsLoadingComments","setCommentsError","setIsLoadingComment","a","useEffect","fetchUsers","prevComments","Error","message","currentComments","filter","currentComment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2762e179.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[] | null;\n  setSideBarOpened: React.Dispatch<React.SetStateAction<boolean>>;\n  isSideBarOpened: boolean;\n  loadComments: (post: Post) => Promise<void>;\n  setIsCommentFormOpened: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  setSideBarOpened,\n  isSideBarOpened,\n  loadComments,\n  setIsCommentFormOpened,\n}) => {\n  const [id, setId] = useState<number | null>(null);\n\n  const openClick = (post?: Post, postId?: number) => {\n    setSideBarOpened(true);\n    setIsCommentFormOpened(false);\n\n    if (postId && post) {\n      setId(postId);\n      loadComments(post);\n    } else {\n      setSideBarOpened(!isSideBarOpened);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts && posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {isSideBarOpened && post.id === id ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={() => openClick()}\n                  >\n                    Close\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => openClick(post, post.id)}\n                  >\n                    Open\n                  </button>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  addComment: ({ name, email, body }: CommentData) => Promise<void>;\n  postId: number | undefined;\n  loadingComment: boolean;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  addComment,\n  postId,\n  loadingComment,\n}) => {\n  const [inputName, setInputName] = useState('');\n  const [inputNameError, setInputNameError] = useState(false);\n\n  const [inputEmail, setInputEmail] = useState('');\n  const [inputEmailError, setInputEmailError] = useState(false);\n\n  const [inputComment, setInputComment] = useState('');\n  const [inputCommentError, setInputCommentError] = useState(false);\n\n  const changeInputName = (value: string) => {\n    setInputName(value.trim());\n    setInputNameError(false);\n  };\n\n  const changeInputEmail = (value: string) => {\n    setInputEmail(value.trim());\n    setInputEmailError(false);\n  };\n\n  const changeInputComment = (value: string) => {\n    setInputComment(value.trim());\n    setInputCommentError(false);\n  };\n\n  const submitData = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    name: string,\n    email: string,\n    body: string,\n  ) => {\n    event.preventDefault();\n\n    if (!inputName) {\n      setInputNameError(true);\n    }\n\n    if (!inputEmail) {\n      setInputEmailError(true);\n    }\n\n    if (!inputComment) {\n      setInputCommentError(true);\n    }\n\n    if (inputName && inputEmail && inputComment && postId) {\n      addComment({\n        postId, name, email, body,\n      });\n    }\n\n    setInputComment('');\n  };\n\n  const clearData = () => {\n    setInputName('');\n    setInputEmail('');\n    setInputComment('');\n    setInputNameError(false);\n    setInputEmailError(false);\n    setInputCommentError(false);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': inputNameError })}\n            value={inputName}\n            onChange={(event) => changeInputName(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {inputNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {inputNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': inputEmailError })}\n            value={inputEmail}\n            onChange={(event) => changeInputEmail(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {inputEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {inputEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea',\n              { 'is-danger': inputCommentError })}\n            value={inputComment}\n            onChange={(event) => changeInputComment(event.target.value)}\n          />\n        </div>\n\n        {inputCommentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button', 'is-link', { 'is-loading': loadingComment },\n            )}\n            onClick={(event) => submitData(\n              event,\n              inputName,\n              inputEmail,\n              inputComment,\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearData}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  currentPost: Post | null;\n  comments: Comment[] | null;\n  isLoadingComments: boolean;\n  commentsError: string;\n  isCommentFormOpened: boolean;\n  setIsCommentFormOpened: React.Dispatch<React.SetStateAction<boolean>>;\n  addComment: ({ name, email, body }: CommentData) => Promise<void>;\n  isLoadingComment: boolean;\n  deleteComment: (id: number) => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  currentPost,\n  comments,\n  isLoadingComments,\n  commentsError,\n  isCommentFormOpened,\n  setIsCommentFormOpened,\n  addComment,\n  isLoadingComment,\n  deleteComment,\n}) => {\n  const showNewCommentForm = () => {\n    setIsCommentFormOpened(true);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {currentPost && (`#${currentPost.id}: ${currentPost.title}`)}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {currentPost && currentPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingComments && <Loader />}\n\n          {commentsError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments && comments.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!isLoadingComments && comments && comments.length > 0 && (\n            <p className=\"title is-4\">Comments:</p>)}\n          {comments\n          && comments.length > 0 && !isLoadingComments && comments.map(\n            ({\n              id,\n              name,\n              email,\n              body,\n            }) => (\n              <div key={id}>\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a\n                      href={`mailto:${email}`}\n                      data-cy=\"CommentAuthor\"\n                    >\n                      {name}\n                    </a>\n\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => deleteComment(id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {body}\n                  </div>\n                </article>\n              </div>\n            ),\n          )}\n\n          {!isLoadingComments && !isCommentFormOpened && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={showNewCommentForm}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isCommentFormOpened && (\n          <NewCommentForm\n            addComment={addComment}\n            postId={currentPost?.id}\n            loadingComment={isLoadingComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  loadPosts: (user: User) => Promise<void>;\n  selectedUser: User | null;\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  loadPosts,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleUserSelect = (user: User) => {\n    setSelectedUser(user);\n\n    toggleDropdown();\n\n    loadPosts(user);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={`dropdown ${isOpen ? 'is-active' : ''}`}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggleDropdown}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                key={user.id}\n                className={classNames(`dropdown-item ${selectedUser && selectedUser.id === user.id ? 'is-active' : ''}`)}\n                onClick={() => handleUserSelect(user)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment, CommentData } from './types/Comment';\nimport { client } from './utils/fetchClient';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [currentPost, setCurrentPost] = useState<Post | null>(null);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [postsError, setPostsError] = useState('');\n  const [isSideBarOpened, setIsSideBarOpened] = useState(false);\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [commentsError, setCommentsError] = useState('');\n  const [isCommentFormOpened, setIsCommentFormOpened] = useState(false);\n  const [isLoadingComment, setIsLoadingComment] = useState(false);\n\n  async function fetchUsers() {\n    const data = await client.get<User[]>('/users');\n\n    setUsers(data);\n  }\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  const loadPosts = async (user: User) => {\n    if (user === selectedUser) {\n      return;\n    }\n\n    try {\n      setIsSideBarOpened(false);\n      setIsLoadingPosts(true);\n      setPostsError('');\n\n      const data = await client.get<Post[]>(`/posts?userId=${user.id}`);\n\n      setPosts(data);\n    } catch (error) {\n      setPosts([]);\n      setPostsError('Failed to load posts');\n    } finally {\n      setIsLoadingPosts(false);\n    }\n  };\n\n  const loadComments = async (post: Post) => {\n    try {\n      setIsLoadingComments(true);\n      setCommentsError('');\n\n      const data = await client.get<Comment[]>(`/comments?postId=${post.id}`);\n\n      setComments(data);\n      setCurrentPost(post);\n    } catch (error) {\n      setComments([]);\n      setCommentsError('Failed to load comments');\n    } finally {\n      setIsLoadingComments(false);\n    }\n  };\n\n  const addComment = async ({\n    postId,\n    name,\n    email,\n    body,\n  }: CommentData) => {\n    try {\n      setIsLoadingComment(true);\n      const response: Comment = await client.post(\n        '/comments', {\n          postId, name, email, body,\n        },\n      );\n\n      setComments((prevComments) => {\n        if (prevComments !== null) {\n          return [...prevComments, response];\n        }\n\n        return [response];\n      });\n    } catch (error: unknown) {\n      throw new Error((error as Error).message);\n    } finally {\n      setIsLoadingComment(false);\n    }\n  };\n\n  const deleteComment = (id: number) => {\n    client.delete(`/comments/${id}`);\n    setComments((currentComments): Comment[] => {\n      if (currentComments) {\n        return currentComments.filter(\n          currentComment => currentComment.id !== id,\n        );\n      }\n\n      return [];\n    });\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  loadPosts={loadPosts}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoadingPosts && <Loader />}\n\n                {postsError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {posts && posts.length === 0 && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {posts && posts.length > 0 && !isLoadingPosts && (\n                  <PostsList\n                    posts={posts}\n                    isSideBarOpened={isSideBarOpened}\n                    setSideBarOpened={setIsSideBarOpened}\n                    loadComments={loadComments}\n                    setIsCommentFormOpened={setIsCommentFormOpened}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': isSideBarOpened },\n            )}\n          >\n            {isSideBarOpened && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  currentPost={currentPost}\n                  comments={comments}\n                  isLoadingComments={isLoadingComments}\n                  commentsError={commentsError}\n                  isCommentFormOpened={isCommentFormOpened}\n                  setIsCommentFormOpened={setIsCommentFormOpened}\n                  addComment={addComment}\n                  isLoadingComment={isLoadingComment}\n                  deleteComment={deleteComment}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}